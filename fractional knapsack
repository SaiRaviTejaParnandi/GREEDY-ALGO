  static bool comp(pair<int,double>a, pair<int,double>b)
    {
        if(a.second>b.second)return 1;
        return 0;
    }
    double fractionalKnapsack(int w, Item arr[], int n)
    {
      
      double a[n];
      double sum=0.00;
      double p[n]={0};
      double current=0;
      for (int i=0;i<n;i++)
      {
          a[i]=(arr[i].value*1.0)/(arr[i].weight*1.0);
      }
      vector<pair<int,double>>v(n);
      for(int i=0;i<n;i++)
      {
          v[i]={arr[i].weight,a[i]};
      }
      sort(v.begin(),v.end(),comp);
      for(int i=0;i<n;i++)
      {
          if(current+v[i].first<w)
          {
              p[i]=v[i].first;
              current=current+v[i].first;
          }
          else
          {
              p[i]=w-current;
              break;
          }
      }
      for(int i=0;i<n;i++)
      {
          sum=sum+p[i]*v[i].second;
      }
     
      return sum;
    }
        
